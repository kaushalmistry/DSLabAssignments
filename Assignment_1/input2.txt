/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    int lengthOfLinkedList(ListNode* head) 
    {
        int length = 0;
        while(head) 
        {
            ++length;
            head = head->next;
        }
        return length;
    }
    void r(ListNode*head,ListNode*e) 
    {
        ListNode *p=NULL,*c=head,*n=head->next;
        while(p!=e)
        {
            c->next=p;
            p=c;
            c=n;
            if(n)n=n->next;
        }
        
    }
    ListNode* reverseKGroup(ListNode* head, int k) 
    {
        
        if(head == NULL||head->next == NULL||k==0) return head;
        ListNode *s=head,*e=head;
        int ct=k-1;
        while(ct--)
        {
            e=e->next;
            if(!e)return head;
        }
        auto newhead= reverseKGroup(e->next,k);
        r(s,e);
        s->next=newhead;
        return e;
  
        
//         if(head == NULL||head->next == NULL) return head;
    
//         int length = lengthOfLinkedList(head);

//         ListNode* dummyHead = new ListNode(0);
//         dummyHead->next = head;

//         ListNode* pre = dummyHead;
//         ListNode* cur;
//         ListNode* nex;

//         while(length >= k) 
//         {
//             cur = pre->next;
//             nex = cur->next;
//             for(int i=1;i<k;i++) 
//             {
//                 cur->next = nex->next;
//                 nex->next = pre->next;
//                 pre->next = nex;
//                 nex = cur->next;
//             }
//             pre = cur;
//             length -= k;
//         )
//         return dummyHead->next;
        
        return NULL;
        
        
    ]
};